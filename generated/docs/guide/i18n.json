{
  "id": "guide/i18n",
  "title": "Internationalization (i18n)",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/i18n.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"internationalization-i18n\">Internationalization (i18n)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#internationalization-i18n\"><i class=\"material-icons\">link</i></a></h1>\n<p>Application internationalization is a many-faceted area of development, focused on making\napplications available and user-friendly to a worldwide audience. This page describes Angular's\ninternationalization (i18n) tools, which can help you make your app available in multiple languages.</p>\n<p>See the <live-example downloadonly=\"\" name=\"i18n\">i18n Example</live-example> for a simple example of\nan AOT-compiled app, translated into French.</p>\n<a id=\"angular-i18n\"></a>\n<h2 id=\"angular-and-i18n\">Angular and i18n<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#angular-and-i18n\"><i class=\"material-icons\">link</i></a></h2>\n<p><em>Internationalization</em> is the process of designing and preparing your app to be usable in different languages.\n<em>Localization</em> is the process of translating your internationalized app into specific languages for particular locales.</p>\n<p>Angular simplifies the following aspects of internationalization:</p>\n<ul>\n<li>Displaying dates, number, percentages, and currencies in a local format.</li>\n<li>Preparing text in component templates for translation.</li>\n<li>Handling plural forms of words.</li>\n<li>Handling alternative text.</li>\n</ul>\n<p>For localization, you can use the <a href=\"cli\">Angular CLI</a> to generate most of the boilerplate necessary to create files for translators, and to publish your app in multiple languages.\nAfter you have set up your app to use i18n, the CLI can help you with the following steps:</p>\n<ul>\n<li>Extracting localizable text into a file that you can send out to be translated.</li>\n<li>Building and serving the app for a given locale, using the translated text.</li>\n<li>Creating multiple language versions of your app.</li>\n</ul>\n<a id=\"setting-up-cli\"></a>\n<h2 id=\"setting-up-localization-with-the-angular-cli\">Setting up localization with the Angular CLI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#setting-up-localization-with-the-angular-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p>The first step to setting up localization when using the Angular CLI is to add the <code>@angular/localize</code> package to the project.  This will install the package within your project as well as\ninitialize the project to take advantage of Angular's localization features.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng add @angular/localize\n</code-example>\n<a id=\"setting-up-locale\"></a>\n<h2 id=\"setting-up-the-locale-of-your-app\">Setting up the locale of your app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#setting-up-the-locale-of-your-app\"><i class=\"material-icons\">link</i></a></h2>\n<p>A locale is an identifier (id) that refers to a set of user preferences that tend to be shared\nwithin a region of the world, such as country. This document refers to a locale identifier as a\n\"locale\" or \"locale id\".</p>\n<p>A Unicode locale identifier is composed of a Unicode language identifier and (optionally) the\ncharacter <code>-</code> followed by a locale extension. (For historical reasons the character <code>_</code> is supported\nas an alternative to <code>-</code>.)  For example, in the locale id <code>fr-CA</code> the <code>fr</code> refers to the French\nlanguage identifier, and the <code>CA</code> refers to the locale extension Canada.</p>\n<div class=\"alert is-critical\">\n<p>Angular follows the Unicode LDML convention that uses stable identifiers (Unicode locale identifiers)\nbased on the norm <a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">BCP47</a>. It is very important that\nyou follow this convention when you define your locale, because the Angular i18n tools use this\nlocale id to find the correct corresponding locale data.</p>\n</div>\n<p>By default, Angular uses the locale <code>en-US</code>, which is English as spoken in the United States of America.</p>\n<p>For more information about Unicode locale identifiers, see the\n<a href=\"http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers\">CLDR core spec</a>.</p>\n<p>For a complete list of locales supported by Angular, see\n<a href=\"https://github.com/angular/angular/tree/master/packages/common/locales\">the Angular repository</a>.</p>\n<p>The locale identifiers used by CLDR and Angular are based on <a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">BCP47</a>.\nThese specifications change over time; the following table maps previous identifiers to current ones at\ntime of writing:</p>\n<table>\n<thead>\n<tr>\n<th>Locale name</th>\n<th>Old locale id</th>\n<th>New locale id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Indonesian</td>\n<td>in</td>\n<td>id</td>\n</tr>\n<tr>\n<td>Hebrew</td>\n<td>iw</td>\n<td>he</td>\n</tr>\n<tr>\n<td>Romanian Moldova</td>\n<td>mo</td>\n<td>ro-MD</td>\n</tr>\n<tr>\n<td>Norwegian Bokm√•l</td>\n<td>no, no-NO</td>\n<td>nb</td>\n</tr>\n<tr>\n<td>Serbian Latin</td>\n<td>sh</td>\n<td>sr-Latn</td>\n</tr>\n<tr>\n<td>Filipino</td>\n<td>tl</td>\n<td>fil</td>\n</tr>\n<tr>\n<td>Portuguese Brazil</td>\n<td>pt-BR</td>\n<td>pt</td>\n</tr>\n<tr>\n<td>Chinese Simplified</td>\n<td>zh-cn, zh-Hans-CN</td>\n<td>zh-Hans</td>\n</tr>\n<tr>\n<td>Chinese Traditional</td>\n<td>zh-tw, zh-Hant-TW</td>\n<td>zh-Hant</td>\n</tr>\n<tr>\n<td>Chinese Traditional Hong Kong</td>\n<td>zh-hk</td>\n<td>zh-Hant-HK</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"i18n-pipes\">i18n pipes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#i18n-pipes\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular pipes can help you with internationalization: the <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>, <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">CurrencyPipe</a></code>, <code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">DecimalPipe</a></code>\nand <code><a href=\"api/common/PercentPipe\" class=\"code-anchor\">PercentPipe</a></code> use locale data to format data based on the <code><a href=\"api/core/LOCALE_ID\" class=\"code-anchor\">LOCALE_ID</a></code> dependency injection token.</p>\n<p>By default, Angular only contains locale data for <code>en-US</code>.\nThe CLI automatically includes the locale data and sets the <code><a href=\"api/core/LOCALE_ID\" class=\"code-anchor\">LOCALE_ID</a></code> value for you when you use the\nparameter <code>--i18nLocale</code> or option <code>i18nLocale</code> with <code>ng serve</code> and <code>ng build</code>.\nHowever, if you manually set the value of <code><a href=\"api/core/LOCALE_ID\" class=\"code-anchor\">LOCALE_ID</a></code> to another locale, you must import locale data for that new locale.</p>\n<p>If you want to import locale data for other languages, you can do it manually:</p>\n<code-example path=\"i18n/doc-files/app.locale_data.ts\" region=\"import-locale\" header=\"src/app/app.module.ts\">\nimport { <a href=\"api/common/registerLocaleData\" class=\"code-anchor\">registerLocaleData</a> } from '@angular/common';\nimport localeFr from '@angular/common/locales/fr';\n\n// the second parameter 'fr-FR' is optional\n<a href=\"api/common/registerLocaleData\" class=\"code-anchor\">registerLocaleData</a>(localeFr, 'fr-FR');\n\n</code-example>\n<p>The first parameter is an object containing the locale data imported from <code>@angular/common/locales</code>.\nBy default, the imported locale data is registered with the locale id that is defined in the Angular\nlocale data itself.\nIf you want to register the imported locale data with another locale id, use the second parameter to\nspecify a custom locale id. For example, Angular's locale data defines the locale id for French as\n\"fr\". You can use the second parameter to associate the imported French locale data with the custom\nlocale id \"fr-FR\" instead of \"fr\".</p>\n<p>The files in <code>@angular/common/locales</code> contain most of the locale data that you\nneed, but some advanced formatting options might only be available in the extra dataset that you can\nimport from <code>@angular/common/locales/extra</code>. An error message informs you when this is the case.\nIvy will automatically include the extra locale data if the locale was configured via <code>i18nLocale</code>.</p>\n<code-example path=\"i18n/doc-files/app.locale_data_extra.ts\" region=\"import-locale-extra\" header=\"src/app/app.module.ts\">\nimport { <a href=\"api/common/registerLocaleData\" class=\"code-anchor\">registerLocaleData</a> } from '@angular/common';\nimport localeFr from '@angular/common/locales/fr';\nimport localeFrExtra from '@angular/common/locales/extra/fr';\n\n<a href=\"api/common/registerLocaleData\" class=\"code-anchor\">registerLocaleData</a>(localeFr, 'fr-FR', localeFrExtra);\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>  All locale data used by Angular are extracted from the Unicode Consortium's\n<a href=\"http://cldr.unicode.org/\" title=\"CLDR\">Common Locale Data Repository (CLDR)</a>.</p>\n</div>\n<h2 id=\"template-translations\">Template translations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#template-translations\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n<p>  This document refers to a unit of translatable text as \"text,\" a \"message\", or a\n\"text message.\"</p>\n</div>\n<p>The i18n template translation process has four phases:</p>\n<ol>\n<li>\n<p>Mark static text messages in your component templates for translation.</p>\n</li>\n<li>\n<p>Create a translation file: Use the Angular CLI <code>xi18n</code> command to extract the marked text into an industry-standard translation source file.</p>\n</li>\n<li>\n<p>Edit the generated translation file: Translate the extracted text into the target language.</p>\n</li>\n<li>\n<p>Add the target locale and language translation to the application's configuration.</p>\n</li>\n<li>\n<p>Merge the completed translation file into the application. To do this, use the Angular CLI <code>build</code> command to compile the app, choosing a <a href=\"guide/i18n#merge\">locale-specific configuration</a>, or specifying the <code>--localize</code> <a href=\"guide/i18n#localize-config\">option</a>.  The command replaces the original messages with translated text, and generates a new version of the app in the target language.\n<em> When using individual configurations per locale, you need to build and deploy a separate version of the app for each supported language.\n</em> When using the <code>--localize</code> option, the CLI will automatically build a separate version of the application\nfor each supported language. This option shortens the build process by removing the requirement to perform a full application build for each supported language. You still need to deploy each language-specific version separately.</p>\n</li>\n</ol>\n<a id=\"i18n-attribute\"></a>\n<h3 id=\"mark-text-with-the-i18n-attribute\">Mark text with the i18n attribute<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#mark-text-with-the-i18n-attribute\"><i class=\"material-icons\">link</i></a></h3>\n<p>The Angular <code>i18n</code> attribute marks translatable content. Place it on every element tag whose fixed\ntext is to be translated.</p>\n<p>In the example below, an <code>&#x3C;h1></code> tag displays a simple English language greeting, \"Hello i18n!\"</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"greeting\" header=\"src/app/app.component.html\">\n&#x3C;h1>Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>To mark the greeting for translation, add the <code>i18n</code> attribute to the <code>&#x3C;h1></code> tag.</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute\" header=\"src/app/app.component.html\">\n&#x3C;h1 i18n>Hello i18n!&#x3C;/h1>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>  <code>i18n</code> is a custom attribute, recognized by Angular tools and compilers.\nAfter translation, the compiler removes it. It is not an Angular directive.</p>\n</div>\n<a id=\"help-translator\"></a>\n<h3 id=\"help-the-translator-with-a-description-and-meaning\">Help the translator with a description and meaning<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#help-the-translator-with-a-description-and-meaning\"><i class=\"material-icons\">link</i></a></h3>\n<p>To translate a text message accurately, the translator may need additional information or context.</p>\n<p>You can add a description of the text message as the value of the <code>i18n</code> attribute, as shown in the\nexample below:</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-desc\" header=\"src/app/app.component.html\">\n&#x3C;h1 i18n=\"An introduction header for this sample\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>The translator may also need to know the meaning or intent of the text message within this particular\napp context.</p>\n<p>You add context by beginning the <code>i18n</code> attribute value with the <em>meaning</em> and\nseparating it from the <em>description</em> with the <code>|</code> character: <code>&#x3C;meaning>|&#x3C;description></code></p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-meaning\" header=\"src/app/app.component.html\">\n&#x3C;h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>All occurrences of a text message that have the same meaning will have the same translation.\nA text message that is associated with different meanings can have different translations.</p>\n<p>The Angular extraction tool preserves both the meaning and the description in the translation\nsource file to facilitate contextually-specific translations, but only the combination of meaning\nand text message are used to generate the specific id of a translation. If you have two\nsimilar text messages with different meanings, they are extracted separately. If you have two similar\ntext messages with different descriptions (not different meanings), then they are extracted only once.</p>\n<a id=\"custom-id\"></a>\n<h3 id=\"set-a-custom-id-for-persistence-and-maintenance\">Set a custom id for persistence and maintenance<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#set-a-custom-id-for-persistence-and-maintenance\"><i class=\"material-icons\">link</i></a></h3>\n<p>The angular i18n extractor tool generates a file with a translation unit entry for each <code>i18n</code>\nattribute in a template. By default, it assigns each translation unit a unique id such as this one:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" header=\"messages.fr.xlf.html\" region=\"generated-id\">\n&#x3C;trans-unit id=\"ba0cc104d3d69bf669f97b8d96a4c5d8d9559aa3\" datatype=\"html\">\n\n</code-example>\n<p>When you change the translatable text, the extractor tool generates a new id for that translation unit.\nYou must then update the translation file with the new id.</p>\n<p>Alternatively, you can specify a custom id in the <code>i18n</code> attribute by using the prefix <code>@@</code>.\nThe example below defines the custom id <code>introductionHeader</code>:</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-solo-id\" header=\"app/app.component.html\">\n&#x3C;h1 i18n=\"@@introductionHeader\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>When you specify a custom id, the extractor tool and compiler generate a translation unit with that\ncustom id.</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" header=\"messages.fr.xlf.html\" region=\"custom-id\">\n&#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n\n</code-example>\n<p>The custom id is persistent. The extractor tool does not change it when the translatable text changes.\nTherefore, you do not need to update the translation. This approach makes maintenance easier.</p>\n<h4 id=\"use-a-custom-id-with-a-description\">Use a custom id with a description<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#use-a-custom-id-with-a-description\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can use a custom id in combination with a description by including both in the value of the\n<code>i18n</code> attribute. In the example below, the <code>i18n</code> attribute value includes a description, followed\nby the custom <code>id</code>:</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-id\" header=\"app/app.component.html\">\n&#x3C;h1 i18n=\"An introduction header for this sample@@introductionHeader\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>You also can add a meaning, as shown in this example:</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-meaning-and-id\" header=\"app/app.component.html\">\n&#x3C;h1 i18n=\"site header|An introduction header for this sample@@introductionHeader\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<h4 id=\"define-unique-custom-ids\">Define unique custom ids<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#define-unique-custom-ids\"><i class=\"material-icons\">link</i></a></h4>\n<p>Be sure to define custom ids that are unique. If you use the same id for two different text messages,\nonly the first one is extracted, and its translation is used in place of both original text messages.</p>\n<p>In the example below the custom id <code>myId</code> is used for two different messages:</p>\n<code-example language=\"html\">\n  &#x3C;h3 i18n=\"@@myId\">Hello&#x3C;/h3>\n  &#x3C;!-- ... -->\n  &#x3C;p i18n=\"@@myId\">Good bye&#x3C;/p>\n</code-example>\n<p>Consider this translation to French:</p>\n<code-example language=\"xml\">\n  &#x3C;trans-unit id=\"myId\" datatype=\"html\">\n    &#x3C;source>Hello&#x3C;/source>\n    &#x3C;target <a href=\"api/animations/state\" class=\"code-anchor\">state</a>=\"new\">Bonjour&#x3C;/target>\n  &#x3C;/trans-unit>\n</code-example>\n<p>Because the custom id is the same, both of the elements in the resulting translation contain\nthe same text, <code>Bonjour</code>:</p>\n<code-example language=\"html\">\n  &#x3C;h3>Bonjour&#x3C;/h3>\n  &#x3C;!-- ... -->\n  &#x3C;p>Bonjour&#x3C;/p>\n</code-example>\n<a id=\"no-element\"></a>\n<h3 id=\"translate-text-without-creating-an-element\">Translate text without creating an element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-text-without-creating-an-element\"><i class=\"material-icons\">link</i></a></h3>\n<p>If there is a section of text that you would like to translate, you can wrap it in a <code>&#x3C;span></code> tag.\nHowever, if you don't want to create a new DOM element merely to facilitate translation,\nyou can wrap the text in an <code>&#x3C;ng-container></code> element.\nThe <code>&#x3C;ng-container></code> is transformed into an html comment:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-ng-container\" header=\"src/app/app.component.html\">\n&#x3C;ng-container i18n>I don't output any element&#x3C;/ng-container>\n\n</code-example>\n<a id=\"translate-attributes\"></a>\n<h3 id=\"translate-attributes\">Translate attributes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-attributes\"><i class=\"material-icons\">link</i></a></h3>\n<p>Displayed text is sometimes supplied as the value of an attribute, rather than the content of tag.\nFor example, if your template has an image with a <code>title</code> attribute, the text value of the <code>title</code> attribute needs to be translated.</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-title\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"logo\" title=\"Angular logo\">\n\n</code-example>\n<p>To mark an attribute for translation, add an attribute in the form of <code>i18n-x</code>,\nwhere <code>x</code> is the name of the attribute to translate. The following example shows how to mark the\n<code>title</code> attribute for translation by adding the <code>i18n-title</code> attribute on the <code>img</code> tag:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-title-translate\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"logo\" i18n-title title=\"Angular logo\" />\n\n</code-example>\n<p>This technique works for any attribute of any element.</p>\n<p>You also can assign a meaning, description, and id with the <code>i18n-x=\"&#x3C;meaning>|&#x3C;description>@@&#x3C;id>\"</code>\nsyntax.</p>\n<h2 id=\"regular-expressions-for-plurals-and-selections\">Regular expressions for plurals and selections<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#regular-expressions-for-plurals-and-selections\"><i class=\"material-icons\">link</i></a></h2>\n<p>Different languages have different pluralization rules and grammatical constructions that add\ncomplexity to the translation task.\nYou can use regular expressions with the <code>plural</code> and <code>select</code> clauses to provide patterns that aid translation in these cases.</p>\n<a id=\"plural-ICU\"></a>\n<h3 id=\"pluralization\">Pluralization<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#pluralization\"><i class=\"material-icons\">link</i></a></h3>\n<p>Suppose that you want to say that something was \"updated x minutes ago\".\nIn English, depending upon the number of minutes, you could display \"just now\", \"one minute ago\",\nor \"x minutes ago\" (with x being the actual number).\nOther languages might express the cardinality differently.</p>\n<p>The example below shows how to use a <code>plural</code> ICU expression to display one of those three options\nbased on when the update occurred:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-plural\" header=\"src/app/app.component.html\">\n&#x3C;span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}&#x3C;/span>\n\n</code-example>\n<ul>\n<li>The first parameter is the key. It is bound to the component property (<code>minutes</code>), which determines\nthe number of minutes.</li>\n<li>The second parameter identifies this as a <code>plural</code> translation type.</li>\n<li>The third parameter defines a pluralization pattern consisting of pluralization categories and their matching values.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>  This syntax conforms to the\n<a href=\"http://userguide.icu-project.org/formatparse/messages\" title=\"ICU Message Format\">ICU Message Format</a>\nas specified in the\n<a href=\"http://cldr.unicode.org/index/cldr-spec/plural-rules\" title=\"Pluralization Rules\">CLDR pluralization rules</a>.</p>\n</div>\n<p>Pluralization categories include (depending on the language):</p>\n<ul>\n<li>=0 (or any other number)</li>\n<li>zero</li>\n<li>one</li>\n<li>two</li>\n<li>few</li>\n<li>many</li>\n<li>other</li>\n</ul>\n<p>After the pluralization category, put the default English text in braces (<code>{}</code>).</p>\n<p>In the example above, the three options are specified according to that pluralization pattern. For\ntalking about zero minutes, you use <code>=0 {just now}</code>. For one minute, you use <code>=1 {one minute}</code>.\nAny unmatched cardinality uses <code>other {{{minutes}} minutes ago}</code>. You could choose to add patterns\nfor two, three, or any other number if the pluralization rules were different. For the example of\n\"minute\", only these three patterns are necessary in English.</p>\n<div class=\"alert is-helpful\">\n<p>  You can use interpolations and html markup inside of your translations.</p>\n</div>\n<a id=\"select-ICU\"></a>\n<h3 id=\"select-among-alternative-text-messages\">Select among alternative text messages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#select-among-alternative-text-messages\"><i class=\"material-icons\">link</i></a></h3>\n<p>If your template needs to display different text messages depending on the value of a variable, you\nneed to translate all of those alternative text messages.</p>\n<p>You can handle this with a <code>select</code> ICU expression. It is similar to the <code>plural</code> expressions\nexcept that you choose among alternative translations based on a string value instead of a number,\nand you define those string values.</p>\n<p>The following format message in the component template binds to the component's <code>gender</code> property,\nwhich outputs one of the following string values: \"male\", \"female\" or \"other\".\nThe message maps those values to the appropriate translations:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-select\" header=\"src/app/app.component.html\">\n&#x3C;span i18n>The author is {gender, select, male {male} female {female} other {other}}&#x3C;/span>\n\n</code-example>\n<a id=\"nesting-ICUS\"></a>\n<h3 id=\"nesting-plural-and-select-icu-expressions\">Nesting plural and select ICU expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#nesting-plural-and-select-icu-expressions\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can also nest different ICU expressions together, as shown in this example:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-nested\" header=\"src/app/app.component.html\">\n&#x3C;span i18n>Updated: {minutes, plural,\n  =0 {just now}\n  =1 {one minute ago}\n  other {{{minutes}} minutes ago by {gender, select, male {male} female {female} other {other}}}}\n&#x3C;/span>\n\n</code-example>\n<a id=\"ng-xi18n\"></a>\n<a id=\"ng-xi18n-options\"></a>\n<h2 id=\"create-a-translation-source-file\">Create a translation source file<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#create-a-translation-source-file\"><i class=\"material-icons\">link</i></a></h2>\n<p>When your app is ready, you can use the Angular CLI to extract the text messages marked with <code>i18n</code> and attributes marked with <code>i18n-x</code> into a translation source file.\nOpen a terminal window at the root of the app project and run the CLI command <code>xi18n</code>.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng xi18n\n</code-example>\n<p>By default, the command creates a file named <code>messages.xlf</code> in your project's root directory.</p>\n<a id=\"other-formats\"></a>\n<h3 id=\"output-options\">Output options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#output-options\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can supply command options to change the format, the name, the location, and the source locale of the extracted file.\nFor example, to create a file in the <code>src/locale</code> folder, specify the output path:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng xi18n --output-path src/locale\n</code-example>\n<p>By default, the <code>xi18n</code> command generates a translation file named <code>messages.xlf</code> in the\n<a href=\"https://en.wikipedia.org/wiki/XLIFF\">XML Localization Interchange File Format\n(XLIFF, version 1.2)</a>.</p>\n<p>The command can read and write files in three translation formats:</p>\n<ul>\n<li>XLIFF 1.2 (default)</li>\n<li>XLIFF 2</li>\n<li><a href=\"http://cldr.unicode.org/development/development-process/design-proposals/xmb\">XML Message\nBundle (XMB)</a></li>\n</ul>\n<p>You can specify the translation format explicitly with the <code>--format</code> command option, as illustrated in\nthese example commands:</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng xi18n  --format=xlf\nng xi18n  --format=xlf2\nng xi18n  --format=xmb\n</code-example>\n<p>The sample in this guide uses the default XLIFF 1.2 format.</p>\n<div class=\"alert is-helpful\">\n<p>  XLIFF files have the extension .xlf. The XMB format generates .xmb source files but uses\n.xtb (XML Translation Bundle: XTB) translation files.</p>\n</div>\n<p>You can change the name of the translation source file that is generated by the extraction tool with\nthe <code>--outFile</code> command option:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng xi18n --out-file source.xlf\n\n</code-example>\n<p>You can specify the base locale of your app with the<code>--i18n-locale</code> command option:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng xi18n --i18n-locale fr\n\n</code-example>\n<p>The extraction tool uses the locale to add the app locale information into your translation source\nfile. This information is not used by Angular, but external translation tools may need it.</p>\n<a id=\"translate\"></a>\n<h2 id=\"translate-the-source-text\">Translate the source text<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-the-source-text\"><i class=\"material-icons\">link</i></a></h2>\n<p>By default, the <code>ng xi18n</code> command generates a translation source file named <code>messages.xlf</code> in the project <code>src</code> folder.\nThe next step is to translate the display strings in this source file into language-specific\ntranslation files. The example in this guide creates a French translation file.</p>\n<a id=\"localization-folder\"></a>\n<h3 id=\"create-a-localization-folder\">Create a localization folder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#create-a-localization-folder\"><i class=\"material-icons\">link</i></a></h3>\n<p>Most apps are translated into more than one other language. For this reason, it is standard practice\nfor the project structure to reflect the entire internationalization effort.</p>\n<p>One approach is to dedicate a folder to localization and store related assets, such as\ninternationalization files, there.</p>\n<div class=\"alert is-helpful\">\n<p>  Localization and internationalization are\n<a href=\"https://en.wikipedia.org/wiki/Internationalization_and_localization\">different but\nclosely related terms</a>.</p>\n</div>\n<p>This guide follows that approach. It has a <code>locale</code> folder under <code>src/</code>.\nAssets within that folder have a filename extension that matches their associated locale.</p>\n<h3 id=\"create-the-translation-files\">Create the translation files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#create-the-translation-files\"><i class=\"material-icons\">link</i></a></h3>\n<p>For each translation source file, there must be at least one language translation file for the\nresulting translation.</p>\n<p>For this example:</p>\n<ol>\n<li>Make a copy of the <code>messages.xlf</code> file.</li>\n<li>Put the copy in the <code>locale</code> folder.</li>\n<li>Rename the copy to <code>messages.fr.xlf</code> for the French language translation.</li>\n</ol>\n<p>If you were translating to other languages, you would repeat these steps for each target language.</p>\n<a id=\"translate-text-nodes\"></a>\n<h3 id=\"translate-text-nodes\">Translate text nodes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-text-nodes\"><i class=\"material-icons\">link</i></a></h3>\n<p>In a large translation project, you would send the <code>messages.fr.xlf</code> file to a French translator who\nwould enter the translations using an XLIFF file editor.</p>\n<p>This sample file is easy to translate without a special editor or knowledge of French.</p>\n<ol>\n<li>Open <code>messages.fr.xlf</code> and find the first <code>&#x3C;trans-unit></code> section:</li>\n</ol>\n<blockquote>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-hello-before\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\">\n&#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n  &#x3C;source>Hello i18n!&#x3C;/source>\n  &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n  &#x3C;note priority=\"1\" from=\"meaning\">User welcome&#x3C;/note>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>This XML element represents the translation of the <code>&#x3C;h1></code> greeting tag that you marked with the\n<code>i18n</code> attribute earlier in this guide.</p>\n<p>Note that the translation unit <code>id=introductionHeader</code> is derived from the\n<a href=\"guide/i18n#custom-id\" title=\"Set a custom id\">custom <code>id</code></a> that you set earlier, but\nwithout the <code>@@</code> prefix required in the source HTML.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Duplicate the <code>&#x3C;source/></code> tag, rename it <code>target</code>, and then replace its content with the French\ngreeting. If you were working with a more complex translation, you could use the information\nand context provided by the source, description, and meaning elements to guide your selection of\nthe appropriate French translation.</li>\n</ol>\n<blockquote>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-hello\" header=\"src/locale/messages.fr.xlf (<trans-unit>, after translation)\">\n&#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n  &#x3C;source>Hello i18n!&#x3C;/source>\n  &#x3C;target>Bonjour i18n !&#x3C;/target>\n  &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n  &#x3C;note priority=\"1\" from=\"meaning\">User welcome&#x3C;/note>\n&#x3C;/trans-unit>\n\n</code-example>\n</blockquote>\n<ol start=\"3\">\n<li>Translate the other text nodes the same way:</li>\n</ol>\n<blockquote>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-other-nodes\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\">\n&#x3C;trans-unit id=\"ba0cc104d3d69bf669f97b8d96a4c5d8d9559aa3\" datatype=\"html\">\n  &#x3C;source>I don&#x26;apos;t output any element&#x3C;/source>\n  &#x3C;target>Je n'affiche aucun √©l√©ment&#x3C;/target>\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"701174153757adf13e7c24a248c8a873ac9f5193\" datatype=\"html\">\n  &#x3C;source>Angular logo&#x3C;/source>\n  &#x3C;target>Logo d'Angular&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n</blockquote>\n<div class=\"alert is-important\">\n<p>  <strong>The Angular i18n tools generated the ids for these translation units. Don't change them.</strong>\nEach <code>id</code> depends upon the content of the template text and its assigned meaning.\nIf you change either the text or the meaning, then the <code>id</code> changes.\nFor more information, see the <strong><a href=\"guide/i18n#custom-id\">translation file maintenance discussion</a></strong>.</p>\n</div>\n<a id=\"translate-plural-select\"></a>\n<h2 id=\"translating-plural-and-select-expressions\">Translating plural and select expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translating-plural-and-select-expressions\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <em>plural</em> and <em>select</em> ICU expressions are extracted separately, so they require special attention\nwhen preparing for translation.</p>\n<p>Look for these expressions in relation to other translation units that you recognize from\nelsewhere in the source template. In this example, you know the translation unit for the <code>select</code>\nmust be just below the translation unit for the logo.</p>\n<a id=\"translate-plural\"></a>\n<h3 id=\"translate-plural\">Translate <em>plural</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-plural\"><i class=\"material-icons\">link</i></a></h3>\n<p>To translate a <code>plural</code>, translate its ICU format match values:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-plural\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\">\n&#x3C;trans-unit id=\"5a134dee893586d02bffc9611056b9cadf9abfad\" datatype=\"html\">\n  &#x3C;source>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {&#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago} }&#x3C;/source>\n  &#x3C;target>{VAR_PLURAL, plural, =0 {√† l'instant} =1 {il y a une minute} other {il y a &#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes} }&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>You can add or remove plural cases, with each language having its own cardinality.  (See\n<a href=\"http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html\">CLDR plural rules</a>.)</p>\n<a id=\"translate-select\"></a>\n<h3 id=\"translate-select\">Translate <em>select</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-select\"><i class=\"material-icons\">link</i></a></h3>\n<p>Below is the content of our example <code>select</code> ICU expression in the component template:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-select\" header=\"src/app/app.component.html\">\n&#x3C;span i18n>The author is {gender, select, male {male} female {female} other {other}}&#x3C;/span>\n\n</code-example>\n<p>The extraction tool broke that into two translation units because ICU expressions are extracted\nseparately.</p>\n<p>The first unit contains the text that was outside of the <code>select</code>.\nIn place of the <code>select</code> is a placeholder, <code>&#x3C;x id=\"ICU\"></code>, that represents the <code>select</code> message.\nTranslate the text and move around the placeholder if necessary, but don't remove it. If you remove\nthe placeholder, the ICU expression will not be present in your translated app.</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translate-select-1\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\">\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"f99f34ac9bd4606345071bd813858dec29f3b7d1\" datatype=\"html\">\n  &#x3C;source>The author is &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/source>\n  &#x3C;target>L'auteur est &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>The second translation unit, immediately below the first one, contains the <code>select</code> message.\nTranslate that as well.</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translate-select-2\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\">\n&#x3C;trans-unit id=\"eff74b75ab7364b6fa888f1cbfae901aaaf02295\" datatype=\"html\">\n  &#x3C;source>{VAR_SELECT, select, male {male} female {female} other {other} }&#x3C;/source>\n  &#x3C;target>{VAR_SELECT, select, male {un homme} female {une femme} other {autre} }&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>Here they are together, after translation:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-select\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\">\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"f99f34ac9bd4606345071bd813858dec29f3b7d1\" datatype=\"html\">\n  &#x3C;source>The author is &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/source>\n  &#x3C;target>L'auteur est &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/target>\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"eff74b75ab7364b6fa888f1cbfae901aaaf02295\" datatype=\"html\">\n  &#x3C;source>{VAR_SELECT, select, male {male} female {female} other {other} }&#x3C;/source>\n  &#x3C;target>{VAR_SELECT, select, male {un homme} female {une femme} other {autre} }&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<a id=\"translate-nested\"></a>\n<h3 id=\"translate-a-nested-expression\">Translate a nested expression<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-a-nested-expression\"><i class=\"material-icons\">link</i></a></h3>\n<p>A nested expression is similar to the previous examples. As in the previous example, there are\ntwo translation units. The first one contains the text outside of the nested expression:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translate-nested-1\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\">\n&#x3C;trans-unit id=\"972cb0cf3e442f7b1c00d7dab168ac08d6bdf20c\" datatype=\"html\">\n  &#x3C;source>Updated: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/source>\n  &#x3C;target>Mis √† jour: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>The second unit contains the complete nested expression:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translate-nested-2\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\">\n&#x3C;trans-unit id=\"7151c2e67748b726f0864fc443861d45df21d706\" datatype=\"html\">\n  &#x3C;source>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {&#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago by {VAR_SELECT, select, male {male} female {female} other {other} }} }&#x3C;/source>\n  &#x3C;target>{VAR_PLURAL, plural, =0 {√† l'instant} =1 {il y a une minute} other {il y a &#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes par {VAR_SELECT, select, male {un homme} female {une femme} other {autre} }} }&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>And both together:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translate-nested\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\">\n&#x3C;trans-unit id=\"972cb0cf3e442f7b1c00d7dab168ac08d6bdf20c\" datatype=\"html\">\n  &#x3C;source>Updated: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/source>\n  &#x3C;target>Mis √† jour: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/target>\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"7151c2e67748b726f0864fc443861d45df21d706\" datatype=\"html\">\n  &#x3C;source>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {&#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago by {VAR_SELECT, select, male {male} female {female} other {other} }} }&#x3C;/source>\n  &#x3C;target>{VAR_PLURAL, plural, =0 {√† l'instant} =1 {il y a une minute} other {il y a &#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes par {VAR_SELECT, select, male {un homme} female {une femme} other {autre} }} }&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>The entire template translation is complete. The next section describes how to load that translation\ninto the app.</p>\n<a id=\"app-pre-translation\"></a>\n<h3 id=\"the-app-and-its-translation-file\">The app and its translation file<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#the-app-and-its-translation-file\"><i class=\"material-icons\">link</i></a></h3>\n<p>The sample app and its translation file are now as follows:</p>\n<code-tabs>\n  <code-pane header=\"src/app/app.component.html\" path=\"i18n/src/app/app.component.html\">\n&#x3C;h1 i18n=\"User welcome|An introduction header for this sample@@introductionHeader\">\n  Hello i18n!\n&#x3C;/h1>\n\n&#x3C;ng-container i18n>I don't output any element&#x3C;/ng-container>\n\n&#x3C;br />\n\n&#x3C;img [src]=\"logo\" i18n-title title=\"Angular logo\" />\n&#x3C;br>\n&#x3C;button (click)=\"inc(1)\">+&#x3C;/button> &#x3C;button (click)=\"inc(-1)\">-&#x3C;/button>\n&#x3C;span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}&#x3C;/span>\n({{minutes}})\n&#x3C;br>&#x3C;br>\n&#x3C;button (click)=\"male()\">&#x26;#9794;&#x3C;/button> &#x3C;button (click)=\"female()\">&#x26;#9792;&#x3C;/button> &#x3C;button (click)=\"other()\">&#x26;#9895;&#x3C;/button>\n&#x3C;span i18n>The author is {gender, select, male {male} female {female} other {other}}&#x3C;/span>\n&#x3C;br>&#x3C;br>\n&#x3C;span i18n>Updated: {minutes, plural,\n  =0 {just now}\n  =1 {one minute ago}\n  other {{{minutes}} minutes ago by {gender, select, male {male} female {female} other {other}}}}\n&#x3C;/span>\n\n\n</code-pane>\n  <code-pane header=\"src/app/app.component.ts\" path=\"i18n/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  minutes = 0;\n  gender = 'female';\n  fly = true;\n  logo = 'https://angular.io/assets/images/logos/angular/angular.png';\n  inc(i: number) {\n    this.minutes = Math.min(5, Math.max(0, this.minutes + i));\n  }\n  male() { this.gender = 'male'; }\n  female() { this.gender = 'female'; }\n  other() { this.gender = 'other'; }\n}\n\n\n\n</code-pane>\n  <code-pane header=\"src/app/app.module.ts\" path=\"i18n/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane header=\"src/main.ts\" path=\"i18n/doc-files/main.1.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n  <code-pane header=\"src/locale/messages.fr.xlf\" path=\"i18n/doc-files/messages.fr.xlf.html\">\n&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&#x3C;xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n  &#x3C;file source-language=\"en\" datatype=\"plaintext\" original=\"ng2.template\">\n    &#x3C;body>\n      &#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n        &#x3C;source>Hello i18n!&#x3C;/source>\n        &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n        &#x3C;note priority=\"1\" from=\"meaning\">User welcome&#x3C;/note>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n        &#x3C;source>Hello i18n!&#x3C;/source>\n        &#x3C;target>Bonjour i18n !&#x3C;/target>\n        &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n        &#x3C;note priority=\"1\" from=\"meaning\">User welcome&#x3C;/note>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"ba0cc104d3d69bf669f97b8d96a4c5d8d9559aa3\" datatype=\"html\">\n        &#x3C;source>I don&#x26;apos;t output any element&#x3C;/source>\n        &#x3C;target>Je n'affiche aucun √©l√©ment&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"701174153757adf13e7c24a248c8a873ac9f5193\" datatype=\"html\">\n        &#x3C;source>Angular logo&#x3C;/source>\n        &#x3C;target>Logo d'Angular&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"5a134dee893586d02bffc9611056b9cadf9abfad\" datatype=\"html\">\n        &#x3C;source>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {&#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago} }&#x3C;/source>\n        &#x3C;target>{VAR_PLURAL, plural, =0 {√† l'instant} =1 {il y a une minute} other {il y a &#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes} }&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"f99f34ac9bd4606345071bd813858dec29f3b7d1\" datatype=\"html\">\n        &#x3C;source>The author is &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/source>\n        &#x3C;target>L'auteur est &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"eff74b75ab7364b6fa888f1cbfae901aaaf02295\" datatype=\"html\">\n        &#x3C;source>{VAR_SELECT, select, male {male} female {female} other {other} }&#x3C;/source>\n        &#x3C;target>{VAR_SELECT, select, male {un homme} female {une femme} other {autre} }&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"972cb0cf3e442f7b1c00d7dab168ac08d6bdf20c\" datatype=\"html\">\n        &#x3C;source>Updated: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/source>\n        &#x3C;target>Mis √† jour: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"7151c2e67748b726f0864fc443861d45df21d706\" datatype=\"html\">\n        &#x3C;source>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {&#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago by {VAR_SELECT, select, male {male} female {female} other {other} }} }&#x3C;/source>\n        &#x3C;target>{VAR_PLURAL, plural, =0 {√† l'instant} =1 {il y a une minute} other {il y a &#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes par {VAR_SELECT, select, male {un homme} female {une femme} other {autre} }} }&#x3C;/target>\n      &#x3C;/trans-unit>\n    &#x3C;/body>\n  &#x3C;/file>\n&#x3C;/xliff>\n\n\n\n</code-pane>\n</code-tabs>\n<a id=\"merge\"></a>\n<h2 id=\"merge-the-completed-translation-file-into-the-app\">Merge the completed translation file into the app<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#merge-the-completed-translation-file-into-the-app\"><i class=\"material-icons\">link</i></a></h2>\n<p>To merge the translated text into component templates, compile the app with the completed\ntranslation file. You will need to provide the path to the translation file, and the supported locale or locales for which you have provided translations. You can do this on the command line, or through a build configuration in the project's <code>angular.json</code> file.</p>\n<p>The compilation process is the same whether the translation file is in <code>.xlf</code> format or in another\nformat that Angular understands, such as <code>.xtb</code>.</p>\n<a id=\"merge-aot\"></a>\n<p>The <a href=\"guide/glossary#aot\">AOT compiler</a> is part of a build process that produces a small, fast,\nready-to-run application package. With Ivy in Angular version 9, AOT is used by default for both\ndevelopment and production builds.</p>\n<div class=\"alert is-important\">\n<p>Ivy does not support merging i18n translations when using JIT mode.\nIf you <a href=\"guide/ivy#opting-out-of-ivy-in-version-9\">disable Ivy</a> and are using JIT mode,\nadditional information regarding translation merging can be found <a href=\"https://v8.angular.io/guide/i18n#merge-with-the-jit-compiler\">here</a>.</p>\n</div>\n<p>When you internationalize with the AOT compiler, you must build a separate application\npackage for each language and serve the appropriate package based on either server-side language\ndetection or URL parameters. The CLI can be configured to automatically build separate locale-specific versions\nfor each defined locale.</p>\n<a id=\"localize-config\"></a>\n<p>The <code>i18n</code> project option in your CLI configuration file is used to define locales for a project. The sub-options identify the source language and tell the compiler where to find supported translations for the project.</p>\n<ul>\n<li><code>sourceLocale</code> - The locale used within the source code for the application.  Defaults to <code>en-US</code>.</li>\n<li><code>locales</code> - A map of locale identifiers to translation files</li>\n</ul>\n<code-example language=\"json\" header=\"angular.json\">\n\"projects\": {\n  ...\n  \"angular.io-example\": {\n    ...\n    \"i18n\": {\n      \"sourceLocale\": \"en-US\",\n      \"locales\": {\n        \"fr\": \"src/locale/messages.fr.xlf\"\n      }\n    }\n    ...\n    \"targets\": {\n      ...\n    }\n  }\n}\n</code-example>\n<p>To instruct the AOT compiler to use your translation configuration, set the <code>localize</code> build configuration option in your CLI configuration file, <code>angular.json</code>.  The option supports the following values:</p>\n<ul>\n<li><code>true</code> - Build and generate locale-specific versions for all defined locales including the source locale.</li>\n<li><code>false</code> - (default) Disable localization and do not generate locale-specific versions.</li>\n<li>Array of locale identifiers - Build and generate locale-specific versions for one or more specified locales.</li>\n</ul>\n<p>When using the <code>localize</code> option, the CLI places the output in a locale-specific directory to keep it separate from other locale versions of your application.  The directories are placed within the configured <code>outputPath</code> for the project.\nThe CLI also adjusts the HTML base HREF for each version of the application by adding the locale to the configured <code>baseHref</code>.</p>\n<p>You can also provide the <code>--localize</code> option to the <code>ng build</code> command with your existing <code>production</code> configuration.\nIn this case, the CLI builds all locales defined under i18n in the project configuration.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng build --prod --localize\n</code-example>\n<p>To apply specific build options to only one locale, you can create a custom locale-specific configuration. In this case, the localize option specifies the single locale, as shown here.</p>\n<code-example language=\"json\" header=\"angular.json\">\n\"build\": {\n  ...\n  \"configurations\": {\n    ...\n    \"fr\": {\n      \"localize\": [\"fr\"],\n      \"main\": \"src/main.fr.ts\",\n      ...\n    }\n  }\n},\n\"serve\": {\n  ...\n  \"configurations\": {\n    ...\n    \"fr\": {\n      \"browserTarget\": \"*project-name*:build:fr\"\n    }\n  }\n}\n</code-example>\n<p>You can then pass this configuration to the <code>ng serve</code> or <code>ng build</code> commands.\nThe example below shows how to serve the French language file created in previous\nsections of this guide:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng serve --configuration=fr\n</code-example>\n<div class=\"alert is-important\">\n<p>The CLI development server (<code>ng serve</code>) can only be used with a single locale.</p>\n</div>\n<p>For production builds, you can use configuration composition to execute both configurations:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng build --configuration=production,fr\n</code-example>\n<code-example language=\"json\" header=\"angular.json\">\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser\",\n    \"options\": { ... },\n    \"configurations\": {\n      \"fr\": {\n        \"localize\": [\"fr\"],\n      }\n    }\n  },\n  ...\n  \"serve\": {\n    \"builder\": \"@angular-devkit/build-angular:dev-server\",\n    \"options\": {\n      \"browserTarget\": \"my-project:build\"\n    },\n    \"configurations\": {\n      \"production\": {\n        \"browserTarget\": \"my-project:build:production\"\n      },\n      \"fr\": {\n        \"browserTarget\": \"my-project:build:fr\"\n      }\n    }\n  }\n}\n</code-example>\n<a id=\"missing-translation\"></a>\n<h3 id=\"report-missing-translations\">Report missing translations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#report-missing-translations\"><i class=\"material-icons\">link</i></a></h3>\n<p>By default, when a translation is missing, the build succeeds but generates a warning such as\n<code>Missing translation for message \"foo\"</code>. You can configure the level of warning that is generated by\nthe Angular compiler:</p>\n<ul>\n<li>Error: throw an error. If you are using AOT compilation, the build will fail. If you are using JIT\ncompilation, the app will fail to load.</li>\n<li>Warning (default): show a 'Missing translation' warning in the console or shell.</li>\n<li>Ignore: do nothing.</li>\n</ul>\n<p>You specify the warning level in the <code>options</code> section for the <code>build</code> target of your Angular CLI configuration file, <code>angular.json</code>. The example below shows how to set the warning level to error.</p>\n<code-example language=\"json\" header=\"angular.json\">\n\"options\": {\n  ...\n  \"i18nMissingTranslation\": \"error\"\n}\n</code-example>\n<h3 id=\"deployment-for-multiple-locales\">Deployment for multiple locales<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#deployment-for-multiple-locales\"><i class=\"material-icons\">link</i></a></h3>\n<p>For more details about how to create scripts to generate an app in multiple languages and how to set up Apache 2 and NGINX to serve them from different subdirectories, read <a href=\"https://dev.to/angular/deploying-an-i18n-angular-app-with-angular-cli-2fb9\">this tutorial by Philippe Martin</a>.</p>\n\n</div>\n\n<!-- links to this doc:\n - api/common\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/PercentPipe\n - api/common/getLocaleExtraDayPeriodRules\n - api/common/getLocaleExtraDayPeriods\n - api/common/registerLocaleData\n - api/core/DEFAULT_CURRENCY_CODE\n - api/core/LOCALE_ID\n - api/core/MissingTranslationStrategy\n - api/core/TRANSLATIONS\n - api/core/TRANSLATIONS_FORMAT\n - guide/architecture-next-steps\n - guide/ivy\n - guide/workspace-config\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/PercentPipe\n - api/common/registerLocaleData\n - api/core/Component\n - api/core/LOCALE_ID\n - api/core/NgModule\n - api/core/enableProdMode\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - cli\n - guide/glossary#aot\n - guide/i18n#angular-and-i18n\n - guide/i18n#create-a-localization-folder\n - guide/i18n#create-a-translation-source-file\n - guide/i18n#create-the-translation-files\n - guide/i18n#custom-id\n - guide/i18n#define-unique-custom-ids\n - guide/i18n#deployment-for-multiple-locales\n - guide/i18n#help-the-translator-with-a-description-and-meaning\n - guide/i18n#i18n-pipes\n - guide/i18n#internationalization-i18n\n - guide/i18n#localize-config\n - guide/i18n#mark-text-with-the-i18n-attribute\n - guide/i18n#merge\n - guide/i18n#merge-the-completed-translation-file-into-the-app\n - guide/i18n#nesting-plural-and-select-icu-expressions\n - guide/i18n#output-options\n - guide/i18n#pluralization\n - guide/i18n#regular-expressions-for-plurals-and-selections\n - guide/i18n#report-missing-translations\n - guide/i18n#select-among-alternative-text-messages\n - guide/i18n#set-a-custom-id-for-persistence-and-maintenance\n - guide/i18n#setting-up-localization-with-the-angular-cli\n - guide/i18n#setting-up-the-locale-of-your-app\n - guide/i18n#template-translations\n - guide/i18n#the-app-and-its-translation-file\n - guide/i18n#translate-a-nested-expression\n - guide/i18n#translate-attributes\n - guide/i18n#translate-plural\n - guide/i18n#translate-select\n - guide/i18n#translate-text-nodes\n - guide/i18n#translate-text-without-creating-an-element\n - guide/i18n#translate-the-source-text\n - guide/i18n#translating-plural-and-select-expressions\n - guide/i18n#use-a-custom-id-with-a-description\n - guide/ivy#opting-out-of-ivy-in-version-9\n - http://cldr.unicode.org/\n - http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers\n - http://cldr.unicode.org/development/development-process/design-proposals/xmb\n - http://cldr.unicode.org/index/cldr-spec/plural-rules\n - http://userguide.icu-project.org/formatparse/messages\n - http://www.rfc-editor.org/rfc/bcp/bcp47.txt\n - http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html\n - https://dev.to/angular/deploying-an-i18n-angular-app-with-angular-cli-2fb9\n - https://en.wikipedia.org/wiki/Internationalization_and_localization\n - https://en.wikipedia.org/wiki/XLIFF\n - https://github.com/angular/angular/edit/master/aio/content/guide/i18n.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/angular/angular/tree/master/packages/common/locales\n - https://v8.angular.io/guide/i18n#merge-with-the-jit-compiler\n-->"
}